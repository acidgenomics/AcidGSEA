% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/export-methods.R
\name{export}
\alias{export}
\alias{export,FGSEAList,character,missingOrNULL-method}
\alias{export,FGSEAList,missingOrNULL,missingOrNULL-method}
\title{Objects exported from other packages}
\usage{
export(object, con, format, ...)

\S4method{export}{FGSEAList,character,missingOrNULL}(
  object,
  con,
  format,
  geneSetResults = FALSE,
  compress = getOption(x = "acid.export.compress", default = FALSE),
  overwrite = getOption(x = "acid.overwrite", default = TRUE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{export}{FGSEAList,missingOrNULL,missingOrNULL}(object, con, format, name = NULL, dir, ...)
}
\arguments{
\item{object}{Object.
An object supporting \code{dim()}, or a supported class capable of being coerced
to \code{data.frame}, to be written to disk.}

\item{con}{\code{character(1)}, \code{missing}, or \code{NULL}.
File path.
Alternatively, can leave unset and use \code{ext} and \code{dir} arguments instead.}

\item{format}{\code{character(1)}, \code{missing}, or \code{NULL}.
Output file format extension.}

\item{geneSetResults}{\code{logical(1)} or \code{character}.
Export per-gene set expression including log fold change values generated
from DESeq2. Can be slow when processing all MSigDB collections, so
disabled by default. Alternatively, can declare specific collections to
process, as a \code{character} vector, such as \code{"h"} for the hallmark
gene set collection.}

\item{compress}{\code{logical(1)}.
Apply gzip compression to all files.}

\item{overwrite}{\code{logical(1)}.
Overwrite existing file on disk.}

\item{quiet}{\code{logical(1)}.
Perform command quietly, suppressing messages.}

\item{name}{\code{character(1)}.
Name to use on disk. If \code{NULL}, will use the name of the object instead.}

\item{dir}{\code{character(1)}.
Directory path.}

\item{...}{Additional arguments.}
}
\description{
These objects are imported from other packages. Follow the links
below to see their documentation.

\describe{
  \item{GenomicRanges}{\code{\link[GenomicRanges:GRanges-class]{GRanges}}, \code{\link[GenomicRanges:GRangesList-class]{GRangesList}}}

  \item{IRanges}{\code{\link[IRanges:AtomicList-class]{CharacterList}}, \code{\link[IRanges:DataFrameList-class]{DataFrameList}}, \code{\link[IRanges:AtomicList-class]{FactorList}}, \code{\link[IRanges:IRanges-constructor]{IRanges}}, \code{\link[IRanges:AtomicList-class]{IntegerList}}, \code{\link[IRanges:AtomicList-class]{LogicalList}}, \code{\link[IRanges:AtomicList-class]{NumericList}}, \code{\link[IRanges:AtomicList-class]{RleList}}, \code{\link[IRanges:DataFrameList-class]{SplitDataFrameList}}}

  \item{S4Vectors}{\code{\link[S4Vectors:DataFrame-class]{DataFrame}}, \code{\link[S4Vectors:Factor-class]{Factor}}, \code{\link[S4Vectors:LLint-class]{LLint}}, \code{\link[S4Vectors:List-class]{List}}, \code{\link[S4Vectors:Rle-class]{Rle}}, \code{\link[S4Vectors:SimpleList-class]{SimpleList}}}
}
}
\note{
Updated 2021-10-15.
}
\section{On-disk structure}{


Example:\if{html}{\out{<div class="sourceCode r">}}\preformatted{file.path("object", "mutant_vs_control", "c1.csv")
}\if{html}{\out{</div>}}

S4 object is currently structured by:
\enumerate{
\item Gene set (c1-c8, h).
\item Contrast.
}

The object was structured in this manner to flow with the R Markdown
template. However, when writing to disk, I think it makes more sense to
organize by:
\enumerate{
\item Contrast
\item Gene set.
}
}

\examples{
data(fgsea)

## FGSEAList ====
object <- fgsea
con <- file.path(tempdir(), "example")
export(
    object = object,
    con = con
)
unlink(con, recursive = TRUE)
}
